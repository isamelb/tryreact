{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","image","Recipe","_ref","title","calories","ingredients","react_default","a","createElement","className","style","toFixed","map","text","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getResipes","console","log","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","src_Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,MAAA,oOCoBHC,EAlBA,SAAAC,GAA0C,IAAxCC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUJ,EAAuBE,EAAvBF,MAAOK,EAAgBH,EAAhBG,YACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAMX,QACnBO,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,sBAAcJ,EAASO,WACvBL,EAAAC,EAAAC,cAAA,UACKH,EAAYO,IAAI,SAAAP,GAAW,OACxBC,EAAAC,EAAAC,cAAA,UACKH,EAAYQ,SAIzBP,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAMV,MAAMc,IAAOd,EAAOe,IAAK,OCkD7CC,SA7DH,WAEV,IAFeC,EAIcC,mBAAS,IAJvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIRlB,EAJQoB,EAAA,GAIAG,EAJAH,EAAA,GAAAI,EAKaL,mBAAS,IALtBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAKRE,EALQD,EAAA,GAKAE,EALAF,EAAA,GAAAG,EAMWT,mBAAS,WANpBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAMRE,EANQD,EAAA,GAMDE,EANCF,EAAA,GAQfG,oBAAW,WACTC,IACAC,QAAQC,IAAI,sBACZ,CAACL,IAGH,IAAMG,EAAU,eAAA9B,EAAAkB,OAAAe,EAAA,EAAAf,CAAAgB,EAAA7B,EAAA8B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA7B,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OAAoCjB,EAApC,YAAAiB,OAbd,WAac,aAAAA,OAZf,qCAWI,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAGEL,EAASS,OAHX,OAGXR,EAHWE,EAAAK,KAIjBzB,EAAWkB,EAAKS,MAChBhB,QAAQC,IAAIM,EAAKS,MALA,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAApC,EAAAiD,MAAAC,KAAAC,YAAA,GAoBhB,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,sDACEH,EAAAC,EAAAC,cAAA,QAAM8C,SAVI,SAAAC,GAChBA,EAAEC,iBACF1B,EAASL,GACTC,EAAU,KAOyBjB,UAAY,eACrCH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,aAAagD,KAAO,OAAQC,MAASjC,EAAQkC,SAftD,SAAAJ,GACnB7B,EAAU6B,EAAEK,OAAOF,UAeTpD,EAAAC,EAAAC,cAAA,UACAC,UAAW,gBACXgD,KAAO,UAFP,WAMJnD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACfV,EAAOa,IAAI,SAAAb,GAAM,OAChBO,EAAAC,EAAAC,cAACqD,EAAD,CACAC,IAAO/D,EAAOA,OAAOgE,MACrB5D,MAAQJ,EAAOA,OAAOgE,MACtB3D,SAAWL,EAAOA,OAAOK,SACzBJ,MAASD,EAAOA,OAAOC,MACvBK,YAAeN,EAAOA,OAAOM,oBC5CrB2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1a356ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};","import React from \"react\";\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({title, calories, image, ingredients}) =>{\n    return(\n        <div className= {style.recipe}>\n            <h1>{title}</h1>\n            <p>Calories= {calories.toFixed()}</p>\n            <ol>\n                {ingredients.map(ingredients => (\n                    <li>\n                        {ingredients.text}\n                    </li>\n                ))}\n            </ol>\n            <img className ={style.image}src = {image} alt =\"\"/>\n\n        </div>\n    );  \n};\n\nexport default Recipe;\n","import React, {useEffect, useState}from 'react';\nimport Recipe from\"./Recipe\";\nimport './App.css';\n\nconst App = () =>{\n\n  const  APP_ID = \"df5c9091\";\n  const APP_KEY =\"834cd7db3f7529a8f8466c329b5b1c4a\";\n  const [recipe, setRecipes] = useState([]); \n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('chicken');\n  \n  useEffect( () => {\n    getResipes();\n    console.log(\"useeffect has run\")\n  },[query]);\n\n  \n  const getResipes = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits)\n  };\n  \n\n  const updateSearch = e =>{\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n\n  }\n\n  return(\n      <div className =\"App\">\n        <h1 className =\"author\">Website using react created by isam elbousserghini</h1>\n          <form onSubmit = {getSearch} className = \"search-form\">\n              <input className =\"search-bar\" type = \"text\"  value = {search} onChange ={updateSearch}/>\n              <button \n              className =\"search-button\"\n              type = \"submit\">\n                search\n              </button>\n          </form>\n          <div className= \"recipes\">\n          {recipe.map(recipe => (\n            <Recipe \n            key = {recipe.recipe.label}\n            title ={recipe.recipe.label} \n            calories ={recipe.recipe.calories}\n            image = {recipe.recipe.image}\n            ingredients = {recipe.recipe.ingredients}\n            />\n          ))}\n          </div>\n        </div>\n          \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}